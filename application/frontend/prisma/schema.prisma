generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model echo {
  id       Int     @id @unique(map: "echo_id_UNIQUE") @default(autoincrement())
  name     String? @db.VarChar(45)
  bio      String? @db.VarChar(512)
  owned    Int?    @default(0) @db.TinyInt
  platform String? @db.VarChar(128)
  user_id  String?
  api_key  String? @db.VarChar(128)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model hashtag {
  hash    String? @db.VarChar(128)
  post_id Int

  @@index([post_id], map: "fk_hashtag_Post1_idx")
  @@ignore
}

model post {
  id           Int       @unique(map: "id_UNIQUE") @default(autoincrement())
  content      String?   @db.VarChar(255)
  karma        Int?      @default(0) @db.UnsignedInt
  echo_id      Int
  time_created DateTime? @default(now()) @db.Timestamp(0)
  response     Int?

  @@id([id, echo_id])
  @@index([echo_id], map: "fk_post_echo1_idx")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
